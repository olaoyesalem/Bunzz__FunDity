{
  "address": "0x73108D971c6b49Df04ad9Eb72E0b54bAA0cf235B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "campaignName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "campaignName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46cfdc486dbfe943354eddee976d138314c38cbfadfdaf850b5d368baf8b446d",
  "receipt": {
    "to": null,
    "from": "0xC52CCAd691420EFDdB0d9923e2Abd88CC2133946",
    "contractAddress": "0x73108D971c6b49Df04ad9Eb72E0b54bAA0cf235B",
    "transactionIndex": 97,
    "gasUsed": "432705",
    "logsBloom": "0x
    "blockHash": "0x5ac519592e0e6f163a1ace648b39f448dad44e938da1453dc910585a64d9a11e",
    "transactionHash": "0x46cfdc486dbfe943354eddee976d138314c38cbfadfdaf850b5d368baf8b446d",
    "logs": [],
    "blockNumber": 8593639,
    "cumulativeGasUsed": "9431117",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Salem",
    "Peace"
  ],
  "numDeployments": 1,
  "solcInputHash": "3a3d5578350e312e054037562fd66a6d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"campaignName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"campaignName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"withdraw()\":{\"details\":\"Only reciepient can withdraw funds from this contractall funds can be remooved anytime\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw()\":{\"notice\":\"allows for withdrawing funds from contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Donate.sol\":\"Donate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Donate.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n// Firstly we wan to fund the contract\\r\\n// next we want to be able to withdraw just only the owner\\r\\n\\r\\n//Thirdly, create a campaign\\r\\n// That inherits the fund, withdraw, and other issues.\\r\\n\\r\\ncontract DonateFactory{\\r\\n// So, we create addresses here and fund,withdraw function.\\r\\n  address[] public deployedFundraisers;// we keep track of all the fundraisers here.\\r\\n  mapping(string=>address)public nameToAddress;\\r\\n  bytes32 [] hashedAddressList;\\r\\n\\r\\n    modifier checkDuplicateName(string memory _addressName){\\r\\n       bytes32 addressName= keccak256(abi.encode(_addressName));\\r\\n       uint256 length = hashedAddressList.length;\\r\\n       for(uint256 i=0; i<length;++i){\\r\\n          \\r\\n           require(addressName!=hashedAddressList[i],\\\" Name Has Already Been taken\\\");// Just So beautiful\\r\\n       }\\r\\n        _;\\r\\n    }\\r\\n  \\r\\n    ///@notice This function creates Donate by calling constructor of Donate\\r\\n    ///@param campaignName the firstname of the recipient\\r\\n    ///@param _description the need for the fundraising\\r\\n    function createDonate (string memory campaignName, string memory _description ) checkDuplicateName(campaignName) public{\\r\\n        bytes32 hashedString = keccak256(abi.encode(campaignName));\\r\\n        hashedAddressList.push(hashedString);\\r\\n\\r\\n        address newDonate = address(new Donate(campaignName,  _description));\\r\\n        deployedFundraisers.push(newDonate); \\r\\n        nameToAddress[campaignName]=newDonate;\\r\\n    }\\r\\n\\r\\naddress [] public funders;  \\r\\nmapping(address=>uint256) public addressToAmountFunded;\\r\\naddress  i_owner;\\r\\n\\r\\n    modifier onlyOwner(){\\r\\n    require(msg.sender==i_owner);\\r\\n    _;\\r\\n}\\r\\n\\r\\n    constructor(){\\r\\n    i_owner = msg.sender;\\r\\n}\\r\\n\\r\\n   function Fund() public payable  {\\r\\n        funders.push(msg.sender);\\r\\n        addressToAmountFunded[msg.sender]+=msg.value;\\r\\n\\r\\n}\\r\\n    function withdraw()public onlyOwner{\\r\\n        for(uint i=0; i<funders.length; i++){\\r\\n            addressToAmountFunded[funders[i]]=0;\\r\\n        }\\r\\n        funders = new address[](0);\\r\\n        (bool callSuccess, )=payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n            require(callSuccess,\\\"call Failed\\\");\\r\\n    }\\r\\n\\r\\n    function balance() public view returns(uint256){\\r\\n        uint256 balance = address(this).balance;\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\ncontract Donate{\\r\\n       bytes32 [] private hashedAddressList;\\r\\n       mapping (address=>uint256) private donorsAmount;\\r\\n       address [] donators;\\r\\n\\r\\n         ///@notice only fundraiser/recipient can perform action\\r\\naddress  i_owner;\\r\\n\\r\\n    modifier onlyOwner(){\\r\\n    require(msg.sender==i_owner);\\r\\n    _;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    string public description;\\r\\n    //Campaign name of reciepient\\r\\n    string public campaignName;\\r\\n    //number of donors in the fundraiser\\r\\n    \\r\\n\\r\\n       constructor(string memory campaignName, string memory _description) public {\\r\\n        i_owner = msg.sender;\\r\\n        campaignName = campaignName;\\r\\n     \\r\\n        description = _description;\\r\\n\\r\\n     \\r\\n        \\r\\n    //    emit Contract_Created(_recipient, address(this), _description);\\r\\n    }\\r\\n\\r\\n\\r\\n    function donate() public  payable{  \\r\\n        donators.push(msg.sender); \\r\\n        donorsAmount[msg.sender] = msg.value; //keeps track of the amount that each donor contributes;  \\r\\n     //   emit Funds_Donated(msg.sender,address(this), msg.value);//sends out event that funds has been donated to this fundraiser contract\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n    ///@notice allows for withdrawing funds from contract\\r\\n    ///@dev Only reciepient can withdraw funds from this contract\\r\\n    ///@dev all funds can be remooved anytime\\r\\n    function withdraw() public onlyOwner{\\r\\n        //balance stores the amount of money in the contract at this moment\\r\\n        uint balance = address(this).balance;\\r\\n        // checks if there is money in the account\\r\\n        require(\\r\\n            balance != 0,\\r\\n            \\\"Contract balance is 0\\\"\\r\\n        );\\r\\n        \\r\\n      //  emit Fund_Withdrawn(recipient,address(this),balance);//sends out event that contract owner/recipient have withdrew some funds\\r\\n       \\r\\n        bool sent =payable(msg.sender).send(address(this).balance);\\r\\n    require(sent, \\\"Failed to send ETH\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// I am done with the smart contract for now.\\r\\n//I'll try connecting it with javascript \\r\\n// add events\\r\\n//is there test for events\",\"keccak256\":\"0x89ed4c082e82e734ecaa755248bf170093ec27dfd132677649e5e94be4edc40c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620009aa380380620009aa8339818101604052810190620000379190620001c7565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600490805190602001906200009092919062000099565b505050620003d0565b828054620000a790620002e1565b90600052602060002090601f016020900481019282620000cb576000855562000117565b82601f10620000e657805160ff191683800117855562000117565b8280016001018555821562000117579182015b8281111562000116578251825591602001919060010190620000f9565b5b5090506200012691906200012a565b5090565b5b80821115620001455760008160009055506001016200012b565b5090565b6000620001606200015a8462000275565b6200024c565b9050828152602081018484840111156200017f576200017e620003b0565b5b6200018c848285620002ab565b509392505050565b600082601f830112620001ac57620001ab620003ab565b5b8151620001be84826020860162000149565b91505092915050565b60008060408385031215620001e157620001e0620003ba565b5b600083015167ffffffffffffffff811115620002025762000201620003b5565b5b620002108582860162000194565b925050602083015167ffffffffffffffff811115620002345762000233620003b5565b5b620002428582860162000194565b9150509250929050565b6000620002586200026b565b905062000266828262000317565b919050565b6000604051905090565b600067ffffffffffffffff8211156200029357620002926200037c565b5b6200029e82620003bf565b9050602081019050919050565b60005b83811015620002cb578082015181840152602081019050620002ae565b83811115620002db576000848401525b50505050565b60006002820490506001821680620002fa57607f821691505b602082108114156200031157620003106200034d565b5b50919050565b6200032282620003bf565b810181811067ffffffffffffffff821117156200034457620003436200037c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6105ca80620003e06000396000f3fe60806040526004361061003f5760003560e01c80630724fda9146100445780633ccfd60b1461006f5780637284e41614610086578063ed88c68e146100b1575b600080fd5b34801561005057600080fd5b506100596100bb565b604051610066919061041f565b60405180910390f35b34801561007b57600080fd5b50610084610149565b005b34801561009257600080fd5b5061009b610269565b6040516100a8919061041f565b60405180910390f35b6100b96102f7565b005b600580546100c8906104d0565b80601f01602080910402602001604051908101604052809291908181526020018280546100f4906104d0565b80156101415780601f1061011657610100808354040283529160200191610141565b820191906000526020600020905b81548152906001019060200180831161012457829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a357600080fd5b600047905060008114156101ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e390610441565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025c90610461565b60405180910390fd5b5050565b60048054610276906104d0565b80601f01602080910402602001604051908101604052809291908181526020018280546102a2906104d0565b80156102ef5780601f106102c4576101008083540402835291602001916102ef565b820191906000526020600020905b8154815290600101906020018083116102d257829003601f168201915b505050505081565b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60006103ab82610481565b6103b5818561048c565b93506103c581856020860161049d565b6103ce81610531565b840191505092915050565b60006103e660158361048c565b91506103f182610542565b602082019050919050565b600061040960128361048c565b91506104148261056b565b602082019050919050565b6000602082019050818103600083015261043981846103a0565b905092915050565b6000602082019050818103600083015261045a816103d9565b9050919050565b6000602082019050818103600083015261047a816103fc565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104bb5780820151818401526020810190506104a0565b838111156104ca576000848401525b50505050565b600060028204905060018216806104e857607f821691505b602082108114156104fc576104fb610502565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f436f6e74726163742062616c616e636520697320300000000000000000000000600082015250565b7f4661696c656420746f2073656e6420455448000000000000000000000000000060008201525056fea264697066735822122008d46ac62089b1a9148c882dcedc55987e4fbaf5eeb5115cae7e86271e1b3c4164736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80630724fda9146100445780633ccfd60b1461006f5780637284e41614610086578063ed88c68e146100b1575b600080fd5b34801561005057600080fd5b506100596100bb565b604051610066919061041f565b60405180910390f35b34801561007b57600080fd5b50610084610149565b005b34801561009257600080fd5b5061009b610269565b6040516100a8919061041f565b60405180910390f35b6100b96102f7565b005b600580546100c8906104d0565b80601f01602080910402602001604051908101604052809291908181526020018280546100f4906104d0565b80156101415780601f1061011657610100808354040283529160200191610141565b820191906000526020600020905b81548152906001019060200180831161012457829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a357600080fd5b600047905060008114156101ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e390610441565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025c90610461565b60405180910390fd5b5050565b60048054610276906104d0565b80601f01602080910402602001604051908101604052809291908181526020018280546102a2906104d0565b80156102ef5780601f106102c4576101008083540402835291602001916102ef565b820191906000526020600020905b8154815290600101906020018083116102d257829003601f168201915b505050505081565b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60006103ab82610481565b6103b5818561048c565b93506103c581856020860161049d565b6103ce81610531565b840191505092915050565b60006103e660158361048c565b91506103f182610542565b602082019050919050565b600061040960128361048c565b91506104148261056b565b602082019050919050565b6000602082019050818103600083015261043981846103a0565b905092915050565b6000602082019050818103600083015261045a816103d9565b9050919050565b6000602082019050818103600083015261047a816103fc565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104bb5780820151818401526020810190506104a0565b838111156104ca576000848401525b50505050565b600060028204905060018216806104e857607f821691505b602082108114156104fc576104fb610502565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f436f6e74726163742062616c616e636520697320300000000000000000000000600082015250565b7f4661696c656420746f2073656e6420455448000000000000000000000000000060008201525056fea264697066735822122008d46ac62089b1a9148c882dcedc55987e4fbaf5eeb5115cae7e86271e1b3c4164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "withdraw()": {
        "details": "Only reciepient can withdraw funds from this contractall funds can be remooved anytime"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdraw()": {
        "notice": "allows for withdrawing funds from contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 228,
        "contract": "contracts/Donate.sol:Donate",
        "label": "hashedAddressList",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 232,
        "contract": "contracts/Donate.sol:Donate",
        "label": "donorsAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 235,
        "contract": "contracts/Donate.sol:Donate",
        "label": "donators",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 238,
        "contract": "contracts/Donate.sol:Donate",
        "label": "i_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 251,
        "contract": "contracts/Donate.sol:Donate",
        "label": "description",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 253,
        "contract": "contracts/Donate.sol:Donate",
        "label": "campaignName",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}