{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\n\n\n/**\n @title A contract for crowd funding\n @author Olaoye Salem\n @notice This contract is to demo a sample funding contract\n @dev This implements price feeds as our library\n */\n \ncontract FundMe{\n\naddress immutable i_owner;\nuint256 constant MINIMUM_USD = 1e10*18;// 1 dollar\naddress [] public funders; \naddress [] public f_funders;\nmapping(address=>uint256) public addressToAmountFunded;\nmapping(uint256=>address) public amountToAddressFunded;\nmapping(string => address) public nameToAddressCreated;\naddress [] private listOfFunDityAddresses;\nmapping (address=>string) private f_nameToAddress;\nFunDitees[] public funditees;\n\nstruct  FunDitees{\n    address payable funditeeAddress;\n    string  name;\n}\n\n\nconstructor(){\n    i_owner = msg.sender;\n}\n\nmodifier onlyOwner(){\n    require(msg.sender==i_owner);\n    _;\n}\nmodifier sendError(){\n\nrequire(msg.value>=MINIMUM_USD, \"Send More Eth\");\n_;\n}\n\n    function Fund() public payable virtual {\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender]+=msg.value;\n\n}\n    function withdraw()public onlyOwner{\n        for(uint i=0; i<funders.length; i++){\n            addressToAmountFunded[funders[i]]=0;\n        }\n        funders = new address[](0);\n        (bool callSuccess, )=payable(msg.sender).call{value: address(this).balance}(\"\");\n            require(callSuccess,\"call Failed\");\n    }\n    \n        \nfunction highestFunder() public view returns(address){ \n    //not done yet\n    uint256 max=addressToAmountFunded[funders[0]];\n    for(uint256 i = 1; i<funders.length;i++) {\n        if(max < addressToAmountFunded[funders[i]]) {\n            max = addressToAmountFunded[funders[i]];\n        }\n  return amountToAddressFunded[max];\n\n}\n}\n\nfunction createMyFunDity(string calldata _addressName) public  returns(address){\n        // Want to check if there are no two names \n        // get all the names in the the array list an compare it .-=-. \n      \n     bytes32 hashedString = keccak256(abi.encode(_addressName, msg.sender,block.timestamp));\n     address castedAddress = address(uint160(uint256(hashedString)));\n     address payable funditeeAddress = payable(castedAddress);\n     listOfFunDityAddresses.push(funditeeAddress);\n     funditees.push(FunDitees(funditeeAddress,_addressName));\n    nameToAddressCreated[_addressName]=funditeeAddress;\n     return funditeeAddress;\n     // copy an paste the functions but transfer funds to funditeAddress\n     // add event for creation of address\n    }\n\n    function getAddressBalance(address _address) public view returns(uint256){\n        uint256 balance = address(_address).balance;\n        return balance;\n    }\n\n    function fundAddress(address payable _address, uint256 _amount) payable public  {\n    \n        uint256 oldBalance = address(this).balance;\n        uint256 newBalance=address(this).balance+_amount;\n        (bool callSuccess,)=payable(_address).call{value: _amount}(\"\");\n        require(callSuccess,\"call Failed\");\n        // add event for funding\n        // add mssg.sender to list of cretators\n        }\n\n    receive() external payable{\n        Fund();\n    }\n    fallback()external payable{\n        Fund();\n    }\n\n\n}\n\n\n//0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n//1000000000000000000\n\n\n// funding the address is not working"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}