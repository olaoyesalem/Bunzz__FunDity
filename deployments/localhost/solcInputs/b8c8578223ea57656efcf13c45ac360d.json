{
  "language": "Solidity",
  "sources": {
    "contracts/Donate.sol": {
      "content": "// SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.7;\r\n\r\n// Firstly we wan to fund the contract\r\n// next we want to be able to withdraw just only the owner\r\n\r\n//Thirdly, create a campaign\r\n// That inherits the fund, withdraw, and other issues.\r\n\r\ncontract DonateFactory{\r\n// So, we create addresses here and fund,withdraw function.\r\n  address[] public deployedFundraisers;// we keep track of all the fundraisers here.\r\n  mapping(string=>address)public nameToAddress;\r\n  bytes32 [] hashedAddressList;\r\n\r\n    modifier checkDuplicateName(string memory _addressName){\r\n       bytes32 addressName= keccak256(abi.encode(_addressName));\r\n       uint256 length = hashedAddressList.length;\r\n       for(uint256 i=0; i<length;++i){\r\n          \r\n           require(addressName!=hashedAddressList[i],\" Name Has Already Been taken\");// Just So beautiful\r\n       }\r\n        _;\r\n    }\r\n  \r\n    ///@notice This function creates Donate by calling constructor of Donate\r\n    ///@param campaignName the firstname of the recipient\r\n    ///@param _description the need for the fundraising\r\n    function createDonate (string memory campaignName, string memory _description ) checkDuplicateName(campaignName) public{\r\n        bytes32 hashedString = keccak256(abi.encode(campaignName));\r\n        hashedAddressList.push(hashedString);\r\n\r\n        address newDonate = address(new Donate(campaignName,  _description, msg.sender));\r\n        deployedFundraisers.push(newDonate); \r\n        nameToAddress[campaignName]=newDonate;\r\n    }\r\n\r\naddress [] public funders;  \r\nmapping(address=>uint256) public addressToAmountFunded;\r\naddress  i_owner;\r\n\r\n    modifier onlyOwner(){\r\n    require(msg.sender==i_owner);\r\n    _;\r\n}\r\n\r\n    constructor(){\r\n    i_owner = msg.sender;\r\n}\r\n\r\n   function Fund() public payable  {\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender]+=msg.value;\r\n\r\n}\r\n    function withdraw()public onlyOwner{\r\n        for(uint i=0; i<funders.length; i++){\r\n            addressToAmountFunded[funders[i]]=0;\r\n        }\r\n        funders = new address[](0);\r\n        (bool callSuccess, )=payable(msg.sender).call{value: address(this).balance}(\"\");\r\n            require(callSuccess,\"call Failed\");\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Donate{\r\n       bytes32 [] private hashedAddressList;\r\n       mapping (address=>uint256) private donorsAmount;\r\n       address [] donators;\r\n\r\n         ///@notice only fundraiser/recipient can perform action\r\naddress  i_owner;\r\n\r\n    modifier onlyOwner(){\r\n    require(msg.sender==i_owner);\r\n    _;\r\n}\r\n\r\n\r\n\r\n    //address of contract owner,that will be recieving the donations\r\n    address public recipient;\r\n    //the reason for creating fundraising campaign\r\n    string public description;\r\n    //Campaign name of reciepient\r\n    string public campaignName;\r\n    //number of donors in the fundraiser\r\n    \r\n\r\n       constructor(string memory campaignName, string memory _description, address _recipient) public {\r\n        \r\n        campaignName = campaignName;\r\n     \r\n        description = _description;\r\n\r\n        recipient = _recipient;\r\n        \r\n    //    emit Contract_Created(_recipient, address(this), _description);\r\n    }\r\n\r\n\r\n    function donate() public  payable{  \r\n        donators.push(msg.sender); \r\n        donorsAmount[msg.sender] = msg.value; //keeps track of the amount that each donor contributes;  \r\n     //   emit Funds_Donated(msg.sender,address(this), msg.value);//sends out event that funds has been donated to this fundraiser contract\r\n    }\r\n\r\n\r\n    \r\n    ///@notice allows for withdrawing funds from contract\r\n    ///@dev Only reciepient can withdraw funds from this contract\r\n    ///@dev all funds can be remooved anytime\r\n    function withdraw() public onlyOwner{\r\n        //balance stores the amount of money in the contract at this moment\r\n        uint balance = address(this).balance;\r\n        // checks if there is money in the account\r\n        require(\r\n            balance != 0,\r\n            \"Contract balance is 0\"\r\n        );\r\n        \r\n      //  emit Fund_Withdrawn(recipient,address(this),balance);//sends out event that contract owner/recipient have withdrew some funds\r\n       \r\n        bool sent =payable(recipient).send(address(this).balance);\r\n    require(sent, \"Failed to send ETH\");\r\n    }\r\n}\r\n\r\n\r\n// I am done with the smart contract for now.\r\n//I'll try connecting it with javascript \r\n// add events\r\n//is there test for events"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}