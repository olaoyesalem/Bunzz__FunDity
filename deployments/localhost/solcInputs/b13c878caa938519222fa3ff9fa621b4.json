{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "\r\n//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.7;\r\n\r\n\r\n/**\r\n @title A contract for crowd funding\r\n @author Olaoye Salem\r\n @notice This contract is to demo a sample funding contract\r\n @dev This implements price feeds as our library\r\n */\r\n \r\ncontract FundMe{\r\n\r\naddress immutable i_owner;\r\nuint256 constant MINIMUM_USD = 1e10*18;// 1 dollar\r\naddress [] public funders; \r\naddress [] public f_funders;\r\nmapping(address=>uint256) public addressToAmountFunded;\r\nmapping(uint256=>address) public amountToAddressFunded;\r\naddress [] public listOfFunDityAddresses;\r\nuint256 public numberOfAddresses=listOfFunDityAddresses.length;\r\nmapping (string=>address ) public nameToAddress;\r\nFunDitees[] public funditees;\r\n\r\n    address []  public list_of_creators;\r\n    mapping(address=>address) public creatorToAddressCreated;\r\n    mapping(address=>address) public addressCreatedToCreator;\r\n    struct  FunDitees{\r\n    address payable funditeeAddress;\r\n    string  name;\r\n    }\r\n    bytes32 [] private hashedAddressList;\r\nconstructor(){\r\n    i_owner = msg.sender;\r\n}\r\n\r\nmodifier onlyOwner(){\r\n    require(msg.sender==i_owner);\r\n    _;\r\n}\r\nmodifier sendError(){\r\n\r\nrequire(msg.value>=MINIMUM_USD, \"Send More Eth\");\r\n_;\r\n}\r\n\r\n   modifier checkDuplicateName(string memory _addressName){\r\n       bytes32 addressName= keccak256(abi.encode(_addressName));\r\n       uint256 length = hashedAddressList.length;\r\n       for(uint256 i=0; i<length;++i){\r\n          \r\n           require(addressName!=hashedAddressList[i],\" Name Has Already Been taken\");// Just So beautiful\r\n       }\r\n        _;\r\n    }\r\n    modifier checkAddress( address _address){\r\n        uint256 length =listOfFunDityAddresses.length;\r\n        for(uint256 i=0; i<length;){\r\n            unchecked{\r\n                ++i;\r\n            }\r\n            require(_address==listOfFunDityAddresses[i],\"Address not in the list\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function Fund() public payable  {\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender]+=msg.value;\r\n\r\n}\r\n    function withdraw()public onlyOwner {\r\n        for(uint i=0; i<funders.length; i++){\r\n            addressToAmountFunded[funders[i]]=0;\r\n        }\r\n        funders = new address[](0);\r\n        (bool callSuccess, )=payable(msg.sender).call{value: address(this).balance}(\"\");\r\n            require(callSuccess,\"call Failed\");\r\n    }\r\n    \r\n    \r\n\r\n      function createMyFunDity(string memory _addressName) public checkDuplicateName(_addressName)  {\r\n        address caller  = msg.sender;   \r\n        list_of_creators.push(caller);                                             \r\n     bytes32 hashedAddressName = keccak256(abi.encode(_addressName));\r\n     hashedAddressList.push(hashedAddressName);// added  hashed to the array to comapre .\r\n\r\n     bytes32 hashedString = keccak256(abi.encode(_addressName, msg.sender,block.timestamp));\r\n     address castedAddress = address(uint160(uint256(hashedString)));\r\n     address payable funditeeAddress = payable(castedAddress);\r\n    funditees.push(FunDitees(funditeeAddress,_addressName));\r\n     listOfFunDityAddresses.push(funditeeAddress);\r\n     nameToAddress[_addressName]=funditeeAddress;\r\n     creatorToAddressCreated[caller]=funditeeAddress;\r\n     addressCreatedToCreator[funditeeAddress]=caller;\r\n    \r\n\r\n    }\r\n\r\n    function fundAddress(address payable _address) public payable{\r\n           bool sent = _address.send(msg.value);\r\n        require(sent, \"Failed to send ETH\");// Done\r\n    }\r\n\r\n    function withdrawFromAddress( address  payable  _address) public {\r\n     // we need to get the addresses to the creator, which has been mapped, then\r\n    // only the address can call this function\r\n    //    address caller =   addressCreatedToCreator[_address];\r\n    //    require(msg.sender==caller, \"Wrong Sender\");\r\n    //    bool sent =payable(msg.sender).send(1000);\r\n    //     require(sent, \"Failed to send ETH\");\r\n    \r\n\r\n    uint256 balance = address(_address).balance;\r\n    bool sent =payable(address(this)).send(balance);\r\n    require(sent, \"Failed to send ETH\");\r\n        \r\n    }\r\n\r\n    function getAddressBalance(address _address) public view returns(uint256){\r\n        uint256 balance = address(_address).balance;\r\n        return balance;\r\n    }\r\n\r\n    receive() external payable{\r\n        Fund();\r\n    }\r\n    fallback()external payable{\r\n        Fund();\r\n    }\r\n\r\n\r\n}\r\n//withdraw function is not working"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.7;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter{\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n          (,int256 price,,,)=priceFeed.latestRoundData();\r\n    return uint256(price*1e10);\r\n    }\r\n\r\n    function getConversionRate(uint256 eth_Amount, AggregatorV3Interface priceFeed)internal view returns(uint256){\r\n       uint256 ethPrice = getPrice(priceFeed);\r\n       uint256 ethAmountInUSD = (ethPrice* eth_Amount)/10**18;\r\n       return ethAmountInUSD;\r\n    }\r\n}\r\n\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}